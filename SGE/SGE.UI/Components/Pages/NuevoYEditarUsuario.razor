@page "/usuario/{Id:int?}"
@rendermode InteractiveServer
@inject CasoDeUsoUsuarioConsultaPorId consultarUsuario
@inject CasoDeUsoUsuarioModificacion modificarUsuario
@inject CasoDeUsoUsuarioAlta usuarioAlta
@inject NavigationManager Navegador
@inject Logger log
@inject IServicioHash servicioHash

@if (log.Logueado && (log.IdUsuario == 1))
{
    @if (_esNuevoUsuario)
    {
        <h3 class="text-primary">Agregando un nuevo Usuario</h3>
    }
    else
    {
        <h3 class="text-primary">Modificando al Usuario "@u.Id"</h3>
    }

    <div class="container mt-4">
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="nombre" class="form-label">Nombre</label>
                <input id="nombre" placeholder="Nombre" @bind="u.Nombre" class="form-control" />
            </div>
            <div class="col-md-6">
                <label for="apellido" class="form-label">Apellido</label>
                <input id="apellido" placeholder="Apellido" @bind="u.Apellido" class="form-control" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label for="correo" class="form-label">Correo Electrónico</label>
                <input id="correo" type="email" placeholder="Correo Electrónico" @bind="u.CorreoElectronico" class="form-control" />
            </div>
            <div class="col-md-6">
                @if(_esNuevoUsuario)
                {
                    <label for="contraseña" class="form-label">Contraseña</label>
                }
                else
                {
                    <label for="contraseña" class="form-label">Contraseña (no poner nada si no quiere cambiar)</label>
                }
                <input id="contraseña" type="password" placeholder="Contraseña" @bind="u.Contraseña" class="form-control" />
            </div>
        </div>

        <div class="col-12">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="ExpedienteAlta" checked="@isCkecked[0]" @onchange="(e) => ActualizarPermiso(Permiso.ExpedienteAlta, e)">
                    Expediente Alta
            </div>

            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="ExpedienteBaja" checked="@isCkecked[1]" @onchange="(e) => ActualizarPermiso(Permiso.ExpedienteBaja, e)">
                    Expediente Baja
            </div>

            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="ExpedienteModificacion" checked="@isCkecked[2]" @onchange="(e) => ActualizarPermiso(Permiso.ExpedienteModificacion, e)">
                    Expediente Modificacion
            </div>

            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="TramiteAlta" checked="@isCkecked[3]" @onchange="(e) => ActualizarPermiso(Permiso.TramiteAlta, e)">
                    Tramite Alta
            </div>

            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="TramiteBaja" checked="@isCkecked[4]" @onchange="(e) => ActualizarPermiso(Permiso.TramiteBaja, e)">
                    Tramite Baja
            </div>

            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="TramiteModificacion" checked="@isCkecked[5]" @onchange="(e) => ActualizarPermiso(Permiso.TramiteModificacion, e)">
                    Tramite Modificacion
            </div>


        </div>

        <div class="row">
            <div class="col-12">
                <button class="btn btn-primary" @onclick="Aceptar">Aceptar</button>
            </div>
        </div>
    </div>

    <h6 class="text-danger text-center">@mensaje</h6>
}
else 
{
    <MensajeNoLogueado/>
}

<style>
    .container {
        max-width: 600px;
        margin: auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
    }
    h3 {
        text-align: center;
    }
    .form-label {
        font-weight: bold;
    }
    .form-control {
        box-shadow: none;
        border-radius: 4px;
    }
    .btn-primary {
        display: block;
        width: 100%;
        padding: 10px;
        font-size: 16px;
    }
</style>

@code {
    Usuario u = new Usuario();

    string mensaje = "";

    bool[] isCkecked = new bool[]{false, false, false, false, false, false};

    [Parameter] public int? Id {get; set; }
    [Parameter] public bool? puede {get; set; }
    bool _esNuevoUsuario = true;

    protected override void OnParametersSet()
    {
        if(Id != null)
        {
           var u_hallado = consultarUsuario.Ejecutar(Id.Value);
           if (u_hallado != null)
           {
               u = u_hallado;
               _esNuevoUsuario = false;

               u.Contraseña = null;

               isCkecked[0] = u.ListaPermisos.Contains(Permiso.ExpedienteAlta);
               isCkecked[1] = u.ListaPermisos.Contains(Permiso.ExpedienteBaja);
               isCkecked[2] = u.ListaPermisos.Contains(Permiso.ExpedienteModificacion);
               isCkecked[3] = u.ListaPermisos.Contains(Permiso.TramiteAlta);
               isCkecked[4] = u.ListaPermisos.Contains(Permiso.TramiteBaja);
               isCkecked[5] = u.ListaPermisos.Contains(Permiso.TramiteModificacion);
           }
        }
    }

    void Aceptar()
    {
        if (_esNuevoUsuario)
        {
            if(!string.IsNullOrEmpty(u.Contraseña))
            {
                u.Contraseña = servicioHash.HashPassword(u.Contraseña);

                try
                {
                    usuarioAlta.Ejecutar(u);
                    u = new Usuario();
                    mensaje = "";
                    Navegador.NavigateTo("listarUsuarios");
                }
                catch (Exception ex)
                {
                    mensaje = ex.Message;
                    Console.WriteLine(ex);
                    u.Contraseña = "";
                }

            }
            else
            {
                mensaje = "Contraseña vacia";
                Console.WriteLine(mensaje);
            }
        }
        else
        {
            if(!string.IsNullOrEmpty(u.Contraseña))    //si no cambió la contraseña, no la vuelve a hashear
            {
                u.Contraseña = servicioHash.HashPassword(u.Contraseña);
            }
            try
            {
                modificarUsuario.Ejecutar(u);
                u = new Usuario();
                mensaje = "";
                Navegador.NavigateTo("listarUsuarios");
            }
            catch (Exception ex)
            {
                mensaje = ex.Message;
                Console.WriteLine(ex);
            }

        }
    }

    void ActualizarPermiso(Permiso p, ChangeEventArgs e)
    {
        if(e.Value != null)
        {
            if((bool) e.Value){
                u.ListaPermisos.Add(p);
            }
            else
            {
                u.ListaPermisos.Remove(p);
            }
        }

    }
}
